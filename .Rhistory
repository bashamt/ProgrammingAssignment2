install.packages("slidify")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
myfunction <- function()(
x<- rnorm(100)
mean(x)
)
ls
dir
dir()
geetwd()
get()
getwd()
getwd()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<- 5+7
x
y<- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_
my_
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0 times=40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<- (0.5, 55,-10,6)
vector("numeric", 0.5,55,-10,6)
seq(0.5,55,-10,6)
num_vect c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf<- num_vect <1
tf
num_vect>6
num_vect>=6
my_char <- c("My", "name", "is")
my_charr
my_char
paste(my_char, collapse -" ")
paste(my_char, collapse =" ")
my_name <- c(my_char, "Timothy James Basham")
my_name
paste(my_name, collapse" ")
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste("X", "Y", "Z", sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:3, sep="")
paste(LETTERS, 1:4, sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x *3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) &x>0]
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[300]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo =11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11, 2,NA)
names(vect2) <- c("foo", "bar", "norf")
vect
indentical(vect, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector [1:20]
my_vector <-[1:20]
my_vector <-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_my_vector
my_matrix<-my_vector
?matrix()
?matrix
my_matrix2 <-matrix(1:20)
my_matrix2 <-matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(cnames)
colnames(my_data) <- cnames
my_data
EXIT
EXIT()
QUIT
exit
exit()
q()
q()
library(datasets)
data(iris)
?iris
iris
x<-iris[1]
x
mean(x)
colmean(iris)
colmeans(iris)
colMeans(iris)
lapply(iris, 1)
lapply(iris, mean)
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3Quiz1
week3Quiz1()
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
week3QuizQ1()
source('~/Coursera/DataScienceSpecialisation/R Programming/Week 3 Quiz - Q1.R')
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean()
cachemean(4)
source('~/Coursera/DataScienceSpecialisation/_2_RProgramming/AssignmentsQuizes/PA2/repo/Internet.R')
Internet()
makeCacheMatrix()
cacheSolve()
source('~/Coursera/DataScienceSpecialisation/_2_RProgramming/AssignmentsQuizes/PA2/repo/Original.R')
makeVector()
cachemean()
cachemean(2)
makeVector(3)
setwd("~/Coursera/DataScienceSpecialisation/_2_RProgramming/AssignmentsQuizes/PA2/repo")
makeVector(3)
cachemean(1000)
makeVector()
debug
pollutantmean()
c
c
c()
debug(iris)
makeVector(x)
open.account <- function(total) {   list(     deposit = function(amount) {       if(amount <= 0)         stop("Deposits must be positive!\n")       total <<- total + amount       cat(amount, "deposited.  Your balance is", total, "\n\n")     },     withdraw = function(amount) {       if(amount > total)         stop("You don't have that much money!\n")       total <<- total - amount       cat(amount, "withdrawn.  Your balance is", total, "\n\n")     },     balance = function() {       cat("Your balance is", total, "\n\n")     }   )
Page 49 of 107
}
ross <- open.account(100) robert <- open.account(200)
ross$withdraw(30) ross$balance() robert$balance()
ross$deposit(50) ross$balance() ross$withdraw(500)
eixt
exit
q()
source('~/Coursera/DataScienceSpecialisation/_2_RProgramming/AssignmentsQuizes/PA2/repo/Original.R')
q()
